---
source: embedders/tests/instrumentation.rs
expression: out
---
(module
  (type $a (;0;) (func (param i32 i32) (result i32)))
  (type $b (;1;) (func (param i64) (result i64)))
  (type (;2;) (func))
  (import "__" "out_of_instructions" (func $cycles_accept (;0;) (type 2)))
  (import "__" "update_available_memory" (func $addTwo (;1;) (type $a)))
  (import "ic0" "msg_cycles_accept" (func (;2;) (type $b)))
  (func (;3;) (type $a) (param i32 i32) (result i32)
    global.get 0
    i64.const 6
    i64.sub
    global.set 0
    global.get 0
    i64.const 0
    i64.lt_s
    if ;; label = @1
      call $cycles_accept
    end
    local.get 0
    local.get 1
    i32.add
    i64.const 0
    call 2
    drop
  )
  (func (;4;) (type $b) (param i64) (result i64)
    (local i64)
    global.get 0
    local.get 0
    i64.sub
    local.tee 1
    global.get 0
    i64.gt_s
    if (result i64) ;; label = @1
      i64.const -9223372036854775808
    else
      local.get 1
    end
    global.set 0
    global.get 0
    i64.const 0
    i64.lt_s
    if ;; label = @1
      call $cycles_accept
    end
    local.get 0
  )
  (global (;0;) (mut i64) i64.const 0)
  (export "addTwo" (func 3))
  (export "canister counter_instructions" (global 0))
)
