# Geolocation

geoip2 "/run/ic-node/etc/nginx/geoip/GeoLite2-Country.mmdb" {
  $geo_country_code default=N/A source=$remote_addr country iso_code;
  $geo_country_name default=N/A source=$remote_addr country names en;
}

geoip2 "/run/ic-node/etc/nginx/geoip/GeoLite2-City.mmdb" {
  $geo_city_name default=N/A source=$remote_addr city names en;
}

# njs
js_import "ic_router.js";

### Routing

# Obtain two routes (A triplet comprised of subnet/node/type)
# - A route for the requested canister ID
# - A random route (used for proxying upstream health checks)

js_set $is_table_empty ic_router.isTableEmpty; # Check if the routing table is empty

# Canister Route
js_set $route ic_router.route;

map $route $node_id {
  "~^(?<v>[^,]*),[^,]*,[^,]*$" $v;
}

map $route $subnet_id {
  "~^[^,]*,(?<v>[^,]*),[^,]*$" $v;
}

map $route $subnet_type {
  "~^[^,]*,[^,]*,(?<v>[^,]*)$" $v;
}

# Random Route
js_set $random_route ic_router.randomRoute;

map $random_route $random_route_subnet_id {
  "~^(?<v>.+),[^,]*,[^,]*$" $v;
}

map $random_route $random_route_subnet_type {
  "~^[^,]*,(?<v>.+),[^,]*$" $v;
}

map $random_route $random_route_node_id {
  "~^[^,]*,[^,]*,(?<v>.+)$" $v;
}

js_set $host_canister_id ic_router.hostCanisterId;
js_set $inferred_canister_id ic_router.inferCanisterId;

### Compliance

# A denylist is provided to restrict access to forbidden canisters
# A canister- and subnet-allowlist overrides any erroneously denied canisters

map "$inferred_canister_id $geo_country_code" $denylisted {
  default "0";
  include /var/opt/nginx/denylist/denylist.map; # lines of the format `"~^ryjl3-tyaaa-aaaaa-aaaba-cai (CH|...)$" "1";` or `"~^ryjl3-tyaaa-aaaaa-aaaba-cai .*$" "1";` 
}

map $inferred_canister_id $canister_allowed {
  default "0";
  include "allowlist_canisters.map";
}

map $subnet_id $subnet_allowed {
  default "0";
  include "allowlist_subnets.map";
}

js_import is_bot from njs/njs-plugin-is-bot.js;
js_set $is_bot is_bot.fn;

### Domain-Canister Type Match (System/Application)

map $host $is_system_domain {
  default "0";
  include /run/ic-node/etc/nginx/conf.d/system_domains.conf;
}

map $host $is_application_domain {
  default "0";
  include /run/ic-node/etc/nginx/conf.d/application_domains.conf;
}

map "$is_system_domain,$is_application_domain,$subnet_type" $domain_canister_match {
  default                 "0";
  "~^1,[01],system$"      "1";
  "~^[01],1,application$" "1";
}

# Primary Domains

include "/run/ic-node/etc/nginx/conf.d/set_primary_system_domain.conf";
include "/run/ic-node/etc/nginx/conf.d/set_primary_application_domain.conf";

map "$subnet_type" $primary_domain {
  default       $primary_system_domain;
  "application" $primary_application_domain;
}

geo $rosetta {
  default 0;     # all other traffic maps to zone 0
  10.0.0.0/8 1;  # local and rosetta traffic map to zone 1

  # Add rosetta node addresses here and map to zone 1
  2a00:fb01:400::/56 1;
  2607:fb58:9005::/48 1;
  2602:fb2b:100::/48 1;
}

map $subnet_id $nns {
  default "";
  qahwp-36t4m-fjumt-a6uqb-mejzn-xuwvi-swwk5-35xmw-koagu-idvtz-sqe $rosetta;
}

map nop $icx_proxy {
  default "127.0.0.1:9500";
}

map $remote_addr $traffic_segment {
  default   "external";
  127.0.0.1 "internal";
}

add_header X-Frame-Options "DENY" always;
add_header X-Content-Type-Options "nosniff" always;
add_header X-XSS-Protection "1; mode=block" always;

### Rate Limiting

limit_req_status 429;

# for call/update requests
limit_req_zone $nns zone=nns_zone:1m rate=10r/s;
limit_req_zone $subnet_id zone=subnet_zone:1m rate=300r/s;

# for read request
limit_req_zone $nns zone=nns_read_zone:1m rate=100r/s;
limit_req_zone $subnet_id zone=subnet_read_zone:1m rate=500r/s;

limit_req_zone $binary_remote_addr zone=http_remote_addr_zone:1m rate=100r/s;
limit_req_zone $rosetta zone=http_zone:1m rate=10000r/s;

# for custom-domain registrations
limit_req_zone global              zone=rgs_global:32k rate=10r/s;
limit_req_zone $binary_remote_addr zone=rgs_per_ip:1m  rate=1r/s;

root /var/www/html;

# Any direct HTTPS access without correct domain name will default to returning a 404.
server {
  listen       443 ssl http2;
  listen       [::]:443 ssl http2 ipv6only=on; # setting ipv6only=on once turns it on for all instances on that port

  server_name  _;

  return 404;
}

# Any direct HTTP traffic will be redirected to HTTPS via 301.
server {
  listen       80;
  listen       [::]:80 ipv6only=on; # setting ipv6only=on once turns it on for all instances on that port

  server_name  _;

  return 301 https://$host$request_uri;
}
